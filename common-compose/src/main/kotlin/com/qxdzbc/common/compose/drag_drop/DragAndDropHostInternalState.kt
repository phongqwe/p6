package com.qxdzbc.common.compose.drag_drop

import androidx.compose.ui.geometry.Offset
import com.qxdzbc.common.compose.layout_coor_wrapper.P6Layout

/**
 * Store data generated by Drag, Drop, and DragAndDropHost composables
 */
interface DragAndDropHostInternalState {

    val isDragging:Boolean
    fun setIsDragging(i:Boolean):DragAndDropHostInternalState

    val mousePositionInWindow: Offset?
    fun setMousePositionWindow(i: Offset?): DragAndDropHostInternalState

    val currentDrag:Any?
    fun setCurrentDrag(i:Any?):DragAndDropHostInternalState

    /**
     * Reset this state to the state in which no dragging is happening
     */
    fun resetToNonDragState():DragAndDropHostInternalState

    /**
     * A map of [P6Layout] by some key. This is for identifying the currently dragged item.
     */
    val dragMap:Map<Any,P6Layout?>
    fun addDragLayoutCoorWrapper(key:Any, layoutCoorWrapper: P6Layout):DragAndDropHostInternalState
    fun removeDragLayoutCoorWrapper(key:Any):DragAndDropHostInternalState
    /**
     * Clear [dragMap] and add all id in [ids] as keys into [dragMap]
     */
    fun setAcceptableDragIds(ids:Set<Any>):DragAndDropHostInternalState
    val acceptableDragIds:Set<Any>

    val dropMap:Map<Any,P6Layout?>
    fun addDropLayoutCoorWrapper(key:Any, layoutCoorWrapper: P6Layout):DragAndDropHostInternalState
    fun removeDropLayoutCoorWrapper(key:Any):DragAndDropHostInternalState
    /**
     * Clear [dropMap] and add all id in [ids] as keys into [dropMap]
     */
    fun setAcceptableDropIds(ids:Set<Any>):DragAndDropHostInternalState
    val acceptableDropIds:Set<Any>

    val hostCoorWrapper: P6Layout?
    fun setHostLayoutCoorWrapper(i:P6Layout?):DragAndDropHostInternalState

    fun detectDrop(dragId:Any):Any?


}

